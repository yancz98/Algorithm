package Algorithm

// 选择排序
//
// 每轮目标：选出一个最小的元素与该轮第一个位置交换
// 假设最小元素在第一个位置，与后面元素依次比较，最后交换
// 第 1 轮：从 [1:N) 中选出一个最小的元素与第一个位置交换，需比较 N-1 次，还可能存在一次交换
// 第 2 轮：从 [2:N) 中选出一个最小的元素与第二个位置交换，需比较 N-2 次
// ...
// 第 N-1 轮：从 [N-1:N) 需比较 1 次
//
// 时间复杂度 = N-1 + N-2 + ... + 1 = (N^2 - N)/2 = O(N^2)
func SelectSort(arr []int) {
	for i := 0; i < len(arr)-1; i++ {
		// 每轮假设最小的元素为第一个
		min := i
		for j := i + 1; j < len(arr); j++ {
			if arr[j] < arr[min] {
				min = j
			}
		}

		// 本轮查找结束，交换位置
		if min != i {
			// 假设不成立，最小元素不在本轮的第一个位置，则交换
			arr[i], arr[min] = arr[min], arr[i]
		}
	}
}
