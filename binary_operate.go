package Algorithm

import (
	"fmt"
)

// 原码、反码、补码

// 正数的原码、反码、补码相同（int8）
// [+1]原码 = 00000001
// [+1]反码 = 00000001
// [+1]补码 = 00000001

// 负数的原码：符号位不同（int8）
// 负数的反码：在原码的基础上符号位不变，其余位取反
// 负数的补码：在反码的基础上 +1
// [-1]原码 = 10000001
// [-1]反码 = 11111110
// [-1]补码 = 11111111

// 计算机如何处理加减法：
// 计算机不会减法，只会加法，如: 1 - 2 = 1 + (-2)
// 而且计算机的加法运算是通过【补码】计算的

// [+1]原码 = 00000001
// [+1]反码 = 00000001
// [+1]补码 = 00000001
//
// [-2]原码 = 10000010
// [-2]反码 = 11111101
// [-2]补码 = 11111110

// [1 + (-2)]: 补码运算
// 00000001
// 11111110
// +
// 11111111

// 1 将计算结果赋值给 int8：需要经过 -1 取反的操作
// -1:  11111110
// 取反：10000001
// int8 := -1
func binaryOperate1() {
	var a int8 = 1
	var b int8 = 2
	var c int8
	c = a - b

	fmt.Println(c) // -1
}

// 2 将计算结果赋值给 uint8：无符号，原反补码都一样
// uint8 := 255
func binaryOperate2() {
	var a uint8 = 1
	var b uint8 = 2
	var c uint8
	c = a - b

	fmt.Println(c) // 255
}
