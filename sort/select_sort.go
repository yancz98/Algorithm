package sort

// SelectSort 选择排序（最差的排序算法，不用）
//
// 原理：
//  通过遍历数组，选出该数组中较大的或者较小的，放在数组的起始位置，当遍历完整个数组时排序完成。
//
// 步骤：
//  第 1 轮：从 [0:N) 中选出最小的元素与第一个位置交换，比较 N-1 次，可能交换 1 次
//  第 2 轮：从 [1:N) 中选出最小的元素与第二个位置交换，比较 N-2 次，可能交换 1 次
//  ...
//  第 N-1 轮：从 [N-2:N) 中选出最小的元素与第N个位置交换，比较 1 次，可能交换 1 次
//
//  - 时间复杂度 = N-1 + N-2 + ... + 1 = (N^2 - N)/2 = O(N^2)
//  - 空间复杂度 = O(1)
//  - 稳定性：不稳定
func SelectSort(arr []int) {
	for i := 0; i < len(arr); i++ {
		// 每轮假设最小的元素为第一个
		min := i
		for j := i + 1; j < len(arr); j++ {
			if arr[j] < arr[min] {
				min = j
			}
		}

		// 本轮选择结束，若最小元素不是本轮的第一个位置，则交换
		if min != i {
			arr[i], arr[min] = arr[min], arr[i]
		}
	}
}
