package sort

// BubbleSort 冒泡排序
//
// 原理：
//  依次比较相邻的两个元素，如果前一个大于后一个，则交换它们，每轮结束后，最大的元素会被交换到该轮的最后一个位置
//
// 步骤：
//  第 1 轮：从 [0:N-1) 依次比较并交换，需比较+交换 2*(N-1) 次
//  第 2 轮：从 [0:N-2) 依次比较并交换，需比较+交换 2*(N-2) 次
//  ...
//  第 N-1 轮：从 [0:1] 依次比较并交换，需比较+交换 2*1 次
//
// 特性：
//  - 时间复杂度 = 2*(N-1 + N-2 + ... + 1) = N^2 - N = O(N^2)
//  - 空间复杂度：O(1)
//  - 稳定性：稳定
func BubbleSort(arr []int) {
	// 控制每轮比较的范围：[0:N-round) （round 表示轮次）
	for i := len(arr) - 1; i > 0; i-- {
		for j := 0; j < i; j++ {
			// 如果前一个大于后一个，则交换
			if arr[j] > arr[j+1] {
				arr[j], arr[j+1] = arr[j+1], arr[j]
			}
		}
	}
}
